// Code generated by go-swagger; DO NOT EDIT.

package student

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateStudentHandlerFunc turns a function with the right signature into a update student handler
type UpdateStudentHandlerFunc func(UpdateStudentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateStudentHandlerFunc) Handle(params UpdateStudentParams) middleware.Responder {
	return fn(params)
}

// UpdateStudentHandler interface for that can handle valid update student params
type UpdateStudentHandler interface {
	Handle(UpdateStudentParams) middleware.Responder
}

// NewUpdateStudent creates a new http.Handler for the update student operation
func NewUpdateStudent(ctx *middleware.Context, handler UpdateStudentHandler) *UpdateStudent {
	return &UpdateStudent{Context: ctx, Handler: handler}
}

/*UpdateStudent swagger:route PUT /student student updateStudent

Update an existing student

*/
type UpdateStudent struct {
	Context *middleware.Context
	Handler UpdateStudentHandler
}

func (o *UpdateStudent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateStudentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateStudentBody update student body
//
// swagger:model UpdateStudentBody
type UpdateStudentBody struct {

	// class
	Class string `json:"class,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`
}

// Validate validates this update student body
func (o *UpdateStudentBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateStudentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateStudentBody) UnmarshalBinary(b []byte) error {
	var res UpdateStudentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
